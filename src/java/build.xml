<!--

Copyright (c) 2024 GS1 AISBL.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.

You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


By default, we build a JNI library (.jar and .so files) that is statically
linked against the GS1 Syntax Engine.

It is sufficient to place the built libgs1encoders.{jar,so} files into
accessible locations, then at runtime:

  - Add the .jar file into the classpath.
  - Add the directory containing the .so file into java.library.path.


Alternatively, you can build a JNI library that is dynamically linked against
the GS1 Syntax Engine with:

    ant -Dlink_to_shared_lib=true

This assumes that the GS1 Syntax Engine will be made available as a shared
library pre-installed on any system to which projects using this JNI library
are deployed.

In addition to setting the classpath and java.library.path as above, when
linking to a shared library instance of the GS1 Syntax Engine that is not
installed in the system's regular library location, it is necessary to include
the actual location in the dynamic linker's search path. For example by setting
the environment variables:

  - LD_LIBRARY_PATH   (Linux)
  - DYLD_LIBRARY_PATH (MacOS)

-->

<project name="gs1encoders" default="all" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

  <description>
    Java binding for GS1 Syntax Engine.
  </description>

  <property name="src" location="."/>
  <property name="build" location="build"/>
  <property name="classes" location="${build}/classes"/>
  <property name="jar" location="libgs1encoders.jar"/>

  <property name="wrapfile" location="gs1encoders_wrap.c"/>
  <property name="sofile" location="libgs1encoders.so"/>

  <property name="clib" location="../c-lib"/>

  <target name="init">
    <tstamp/>
    <mkdir dir="${classes}"/>
  </target>

  <target name="cc">
    <exec executable="gcc" failonerror="true">
      <arg line="-fPIC -O2 -g -Werror" />
      <arg line="-I${clib}" />
      <arg line="-I${java.home}/../include" />
      <arg line="-I${java.home}/../include/linux" />
      <arg line="-I${java.home}/include" />
      <arg line="-I${java.home}/include/linux" />
      <arg line="-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--no-as-needed" />
      <arg line="-Wl,--whole-archive -Wl,-Bstatic"     unless:set="link_to_shared_lib" />
      <arg line="-L${clib}/build -lgs1encoders" />
      <arg line="-Wl,--no-whole-archive -Wl,-Bdynamic" unless:set="link_to_shared_lib" />
      <arg line="-shared" />
      <arg line="-o ${sofile}" />
      <arg line="${wrapfile}" />
    </exec>
  </target>

  <target name="strip" depends="cc">
    <exec executable="strip" failonerror="true" unless:set="no_strip">
      <arg line="${sofile}" />
    </exec>
  </target>

  <target name="jni" depends="strip" />

  <target name="compile" depends="init" description="compile the source">
    <javac srcdir="${src}" destdir="${classes}" includeantruntime="false">
      <compilerarg value="-Werror"/>
      <exclude name="*"/>
    </javac>
  </target>

  <target name="jar" depends="compile">
    <jar destfile="${jar}" basedir="${classes}">
    <manifest>
        <attribute name="Implementation-Vendor" value="GS1 AISBL"/>
        <attribute name="Implementation-Title" value="GS1 Encoders Library"/>
        <attribute name="Implementation-Version" value="1.0.0"/>
      </manifest>
    </jar>
  </target>

  <target name="all" depends="jar,jni"/>

  <target name="example" depends="all">
    <javac includes="Example.java" srcdir="${src}" destdir="${src}" includeantruntime="false" classpath=".:${jar}">
      <compilerarg value="-Werror"/>
    </javac>
    <echo unless:set="link_to_shared_lib">To run: java -Djava.library.path=${src} -classpath ${src}:${jar} Example</echo>
    <echo if:set="link_to_shared_lib"    >To run: LD_LIBRARY_PATH=${clib}/build:$LD_LIBRARY_PATH java -Djava.library.path=${src} -classpath ${src}:${jar} Example</echo>
  </target>

  <target name="test" depends="example">
    <java classname="Example" failonerror="true" classpath="${src}:${jar}" fork="true">
      <env key="LD_LIBRARY_PATH" value="${clib}/build:$LD_LIBRARY_PATH" if:set="link_to_shared_lib" />
      <sysproperty key="java.library.path" path="${src}"/>
      <arg value="--version"/>
    </java>
  </target>

  <target name="clean" description="clean up">
    <delete dir="${build}"/>
    <delete file="${jar}"/>
    <delete file="${sofile}"/>
    <delete file="${src}/Example.class"/>
  </target>

</project>
